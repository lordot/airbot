version: '3.11'

services:
 db:
  image: postgres:13.0-alpine
  environment:
   - POSTGRES_DB=${POSTGRES_DB}
   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
   - POSTGRES_USER=${POSTGRES_USER}
  volumes:
   - postgres_db:/var/lib/postgresql/data/
  healthcheck:
   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]

 scraper:
  image: lordot/airscraper
  build:
   context: ../airscraper/
   dockerfile: Dockerfile
  restart: always

 django:
  image: lordot/airbot
  environment:
   - POSTGRES_DB=${POSTGRES_DB}
   - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
   - POSTGRES_USER=${POSTGRES_USER}
   - DEBUG=${DEBUG}
   - SECRET=${SECRET}
   - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
   - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
   - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
   - ENGINE=${ENGINE}
   - HOST=${HOST}
   - ALLOWED_HOSTS=${ALLOWED_HOSTS}
   - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
  build:
   context: ../airbot
   dockerfile: Dockerfile
  restart: always
  volumes:
   - static_value:/app/static/
  depends_on:
   db:
    condition: service_healthy

 nginx:
  build:
   context: ./nginx/
   dockerfile: Dockerfile
  ports:
   - "80:80"
  volumes:
   - static_value:/var/html/static/
  depends_on:
   - django

volumes:
 static_value:
 postgres_db:
